package com.leetcode.datastructure.hashtable;

/**
 *
 * 15. 三数之和
 * 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。
 * 注意：答案中不可以包含重复的三元组。
 *
 *
 *
 * 示例：
 * 给定数组 nums = [-1, 0, 1, 2, -1, -4]，
 * 满足要求的三元组集合为：
 * [
 *   [-1, 0, 1],
 *   [-1, -1, 2]
 * ]
 *
 * 15. 3Sum、
 * 18. 4Sum
 * 题目: 三数之和
 * 示例: 给定数组nums = [-1, 0, 1, 2, -1, -4]
 * 满足要求的三元组集合为:
 * [
 *   [-1, 0, 1],
 *   [-1, -1, 2]
 * ]
 *
 * [-1, 0, 1, 2, -1, -4],   target = 0
 * a + b + c = 0, [-1, 0, 1]
 * ①暴力求解: 3层的嵌套循环 a + b + c ->3Loops O(N^3)
 * ②c = -(a + b)  => Set O(1)
 *    枚举a 和 b是两层循环 a,b => 2Loops, O(N^2)
 *    判断-(a + b)是否在Set中 O(1)
 * 最后时间复杂度是O(N^2), 空间复杂度是O(N)
 * Map和Set经常用来查询和计数;
 * ③Sort.find 先排序再找
 * Array.sort: 快排O(NLogN) [-4,-1,-1,0,1,2]
 * Loop: a  不需用Set了,因为是有序的了,如果 a + b + c > 0
 * 比如a = -4  [-1, (-1 b,-1,-1,0,1,2 c)]
 * 如果 a + b + c > 0 ,太大了, 则c往左边移动, c减少看是否 = 0
 * 如果 a + b + c < 0 ,b进行右边移动, 一直到b和c相遇了,看是否 = 0;
 * 换 a = -1依次进行查找, 要么b动, 要么c动;
 * 整体复杂度O(N^2), 不需要再开一个Set了;
 *
 *
 */
public class LeetCode15ThreeSum {


}
